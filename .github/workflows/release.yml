# PYOXIDIZER_BUILD_FORCE_GIT_SOURCE is set throughout this file to prevent
# pyoxidizer's build.rs from writing the filesystem path to the Git checkout
# in the built binary. With the filesystem path embedded in the binary,
# pyoxidizer will probe for that path at run-time and will attempt to use
# it for the location of the pyembed crate. With the filesystem path not
# set, pyoxidizer will use the canonical github.com repository for any Git
# references.
#
# For the spot tests, we purposefully perform these on separate jobs
# because we don't want a Python or Rust install from the build environment
# to impact the testing.

on:
  push:
  pull_request:
  schedule:
    - cron: '13 15 * * *'
jobs:
  pyoxidizer-linux-x86_64-bin:
    runs-on: 'ubuntu-20.04'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SCCACHE_BUCKET: 'pyoxidizer-sccache'
      SCCACHE_S3_USE_SSL: '1'
    steps:
      - name: Install system packages
        run: |
          sudo apt install -y --no-install-recommends musl-tools

      - uses: actions/checkout@v2
        with:
          # Needed by build.rs, which needs to walk the Git history to find the
          # root commit. Without this, a shallow clone (depth=1) is performed.
          fetch-depth: 0

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: x86_64-unknown-linux-musl

      - name: Install sccache
        run: |
          wget -O sccache.tar.gz --progress dot:mega https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz
          tar -xvzf sccache.tar.gz
          mv sccache-*/sccache /usr/share/rust/.cargo/bin/sccache
          chmod +x /usr/share/rust/.cargo/bin/sccache
          sccache --start-server

      - name: Build pyoxidizer Executable
        env:
          PYOXIDIZER_BUILD_FORCE_GIT_SOURCE: '1'
          RUSTC_WRAPPER: sccache
        run: |
          rustc --version
          cargo build --target x86_64-unknown-linux-musl --release --bin pyoxidizer

      - name: Stop sccache
        continue-on-error: true
        run: |
          sccache --stop-server

      - name: Upload Binary
        uses: actions/upload-artifact@v2
        with:
          name: pyoxidizer-linux-x86_64-bin
          path: target/x86_64-unknown-linux-musl/release/pyoxidizer

      - name: Build Wheel
        run: |
          target/x86_64-unknown-linux-musl/release/pyoxidizer build --release wheel_linux
          mkdir -p wheelhouse
          mv build/*/*/*/*.whl wheelhouse/

      - name: Upload Wheel
        uses: actions/upload-artifact@v2
        with:
          name: pyoxidizer-wheels
          path: wheelhouse

  pyoxidizer-linux-x86_64-bin-check:
    needs:
      - 'pyoxidizer-linux-x86_64-bin'
    runs-on: 'ubuntu-20.04'
    steps:
      - name: Install musl compiler
        run: |
          sudo apt install -y --no-install-recommends musl-tools

      - name: Download Linux Executable
        uses: actions/download-artifact@v2
        with:
          name: pyoxidizer-linux-x86_64-bin

      - name: Spot Test (Native Build)
        run: |
          chmod +x pyoxidizer
          ./pyoxidizer init-config-file myapp
          ./pyoxidizer build --path myapp

      # TODO disabled because of duplicate ffi_type_double, etc symbol failures.
      #- name: Spot Test (musl Cross)
      #  run: |
      #    ./pyoxidizer build --path myapp --target-triple x86_64-unknown-linux-musl

  pyoxidizer-macos-exe:
    strategy:
      fail-fast: false
      matrix:
        target_triple:
          - 'aarch64-apple-darwin'
          - 'x86_64-apple-darwin'
    runs-on: 'macos-10.15'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SCCACHE_BUCKET: 'pyoxidizer-sccache'
      SCCACHE_S3_USE_SSL: '1'
    steps:
      - uses: actions/checkout@v2
        with:
          # Needed by build.rs, which needs to walk the Git history to find the
          # root commit. Without this, a shallow clone (depth=1) is performed.
          fetch-depth: 0

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: ${{ matrix.target_triple }}

      - name: Install sccache
        run: |
          wget -O sccache.tar.gz --progress dot:mega https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-apple-darwin.tar.gz
          tar -xvzf sccache.tar.gz
          mv sccache-*/sccache /Users/runner/.cargo/bin/sccache
          chmod +x /Users/runner/.cargo/bin/sccache
          sccache --start-server

      - name: Build pyoxidizer Executable
        env:
          PYOXIDIZER_BUILD_FORCE_GIT_SOURCE: '1'
          RUSTC_WRAPPER: sccache
        run: |
          case "${{ matrix.target_triple }}" in
            aarch64-apple-darwin)
              export SDKROOT=/Applications/Xcode_12.4.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk
              export OSX_DEPLOYMENT_TARGET=11.0
              ;;
            x86_64-apple-darwin)
              export OSX_DEPLOYMENT_TARGET=10.9
              ;;
            *)
              echo "unhandled target triple: ${{ matrix.target_triple }}"
              exit 1
              ;;
          esac

          rustc --version
          cargo build --target ${{ matrix.target_triple }} --release --bin pyoxidizer

          mkdir -p dist/${{ matrix.target_triple }}
          mv target/${{ matrix.target_triple }}/release/pyoxidizer dist/${{ matrix.target_triple }}/

      - name: Upload Executable
        uses: actions/upload-artifact@v2
        with:
          name: pyoxidizer-macos_exes
          path: |
            dist/*/*

  # We need a separate wheel job for macOS because we need a host pyoxidizer to generate
  # the wheel for cross-compiles.
  pyoxidizer-macos-wheel:
    strategy:
      fail-fast: false
      matrix:
        config:
          - target_triple: 'aarch64-apple-darwin'
            wheel_target: 'wheel_macos_aarch64'
          - target_triple: 'x86_64-apple-darwin'
            wheel_target: 'wheel_macos_x86_64'
    needs:
      - pyoxidizer-linux-x86_64-bin
      - pyoxidizer-macos-exe
    runs-on: 'ubuntu-20.04'
    steps:
      - uses: actions/checkout@v2

      - name: Download Linux exe
        uses: actions/download-artifact@v2
        with:
          name: pyoxidizer-linux-x86_64-bin
          path: dist

      - name: Download macOS Exes
        uses: actions/download-artifact@v2
        with:
          name: pyoxidizer-macos_exes
          path: dist

      - name: Build Wheel
        run: |
          mkdir -p target/${{ matrix.config.target_triple }}/release
          mv dist/${{ matrix.config.target_triple }}/pyoxidizer target/${{ matrix.config.target_triple}}/release/

          chmod +x dist/pyoxidizer dist/*/pyoxidizer
          dist/pyoxidizer build --release ${{ matrix.config.wheel_target }}

          mkdir wheelhouse
          mv build/*/*/*/*.whl wheelhouse/

      - name: Upload Wheel
        uses: actions/upload-artifact@v2
        with:
          name: pyoxidizer-wheels
          path: wheelhouse

  pyoxidizer-macos-universal-exe:
    needs:
      - pyoxidizer-macos-exe
    runs-on: 'macos-10.15'
    steps:
      - name: Download CLI exes
        uses: actions/download-artifact@v2
        with:
          name: pyoxidizer-macos_exes
          path: inputs

      - name: Produce Universal Binary
        run: |
          mkdir -p dist/macos-universal
          lipo inputs/*/pyoxidizer -create -output dist/macos-universal/pyoxidizer
          chmod +x dist/macos-universal/pyoxidizer
          lipo dist/macos-universal/pyoxidizer -info

      - name: Upload Universal Executable
        uses: actions/upload-artifact@v2
        with:
          name: pyoxidizer-macos_universal_exe
          path: dist/*/pyoxidizer

  pyoxidizer-macos-universal-exe-check:
    needs:
      - pyoxidizer-macos-universal-exe
    runs-on: 'macos-10.15'
    steps:
      - name: Download macOS Executable
        uses: actions/download-artifact@v2
        with:
          name: pyoxidizer-macos_universal_exe

      - name: Spot Test (Native Build)
        run: |
          mv macos-universal/pyoxidizer .
          chmod +x pyoxidizer
          ./pyoxidizer init-config-file myapp
          ./pyoxidizer build --path myapp

      - name: Spot Test (aarch64 Cross Build)
        env:
          # The default SDK is 10.15 and the 11.x SDK isn't in a default search path.
          # So we need to point pyoxidizer at a more modern SDK.
          SDKROOT: /Applications/Xcode_12.4.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk
        run: |
          ./pyoxidizer build --path myapp --target-triple aarch64-apple-darwin

  pyoxidizer-macos-dmg:
    needs:
      - pyoxidizer-macos-exe
    runs-on: 'macos-10.15'
    env:
      IN_CI: '1'
    steps:
      - uses: actions/checkout@v2

      - name: Download CLI exes
        uses: actions/download-artifact@v2
        with:
          name: pyoxidizer-macos_exes
          path: dist

      - name: Build DMG
        run: |
          scripts/make-dmg.sh

      - name: Upload DMG
        uses: actions/upload-artifact@v2
        with:
          name: pyoxidizer-macos_dmg
          path: |
            PyOxidizer.dmg

  pyoxidizer-windows-exe:
    strategy:
      fail-fast: false
      matrix:
        config:
          - target_triple: 'i686-pc-windows-msvc'
            wheel_target: 'wheel_windows_x86'
          - target_triple: 'x86_64-pc-windows-msvc'
            wheel_target: 'wheel_windows_x86_64'
    runs-on: 'windows-2019'
    env:
      IN_CI: '1'
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SCCACHE_BUCKET: 'pyoxidizer-sccache'
      SCCACHE_S3_USE_SSL: '1'
      # Prevent sccache server from stopping due to inactivity.
      SCCACHE_IDLE_TIMEOUT: '0'
    steps:
      - uses: actions/checkout@v2
        with:
          # Needed by build.rs, which needs to walk the Git history to find the
          # root commit. Without this, a shallow clone (depth=1) is performed.
          fetch-depth: 0

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: ${{ matrix.config.target_triple }}

      - name: Cache sccache (Windows)
        id: cache-sccache
        uses: actions/cache@v2
        with:
          path: C:/Rust/.cargo/bin/sccache.exe
          key: ${{ runner.os }}-sccache-0

      - name: Install sccache build dependencies
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        run: |
          vcpkg integrate install
          vcpkg install openssl:x64-windows

      - name: Install sccache (Windows)
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        run: |
          cargo install --features 's3' sccache

      - name: Start sccache
        run: |
          sccache --start-server

      - name: Build Executable
        env:
          PYOXIDIZER_BUILD_FORCE_GIT_SOURCE: '1'
          RUSTC_WRAPPER: sccache
        run: |
          rustc --version
          cargo build --target ${{ matrix.config.target_triple }} --release --bin pyoxidizer

          New-Item -ItemType "directory" -Name "dist/${{ matrix.config.target_triple}}"
          copy target/${{ matrix.config.target_triple }}/release/pyoxidizer.exe dist/${{ matrix.config.target_triple }}

      - name: Upload Executable
        uses: actions/upload-artifact@v2
        with:
          name: pyoxidizer-windows_exes
          path: |
            dist/*/*

      - name: Build Wheel
        run: |
          target/${{ matrix.config.target_triple}}/release/pyoxidizer.exe build --release ${{ matrix.config.wheel_target }}

          New-Item -ItemType "directory" -Name "wheelhouse"
          move build/*/*/*/*.whl wheelhouse/

      - name: Upload Wheel
        uses: actions/upload-artifact@v2
        with:
          name: pyoxidizer-wheels
          path: wheelhouse

  pyoxidizer-windows-exe-check:
    strategy:
      fail-fast: false
      matrix:
        config:
          - host_triple: 'i686-pc-windows-msvc'
            target_triple: 'x86_64-pc-windows-msvc'
          - host_triple: 'x86_64-pc-windows-msvc'
            target_triple: 'i686-pc-windows-msvc'
    needs:
      - pyoxidizer-windows-exe
    runs-on: 'windows-2019'
    steps:
      - name: Download Windows Executable
        uses: actions/download-artifact@v2
        with:
          name: pyoxidizer-windows_exes

      - name: Spot Test (Native Build)
        run: |
          ${{ matrix.config.host_triple }}/pyoxidizer.exe init-config-file myapp
          ${{ matrix.config.host_triple }}/pyoxidizer.exe build --path myapp

      - name: Spot Test (Cross-Compile Build)
        run: |
          ${{ matrix.config.host_triple }}/pyoxidizer.exe build --path myapp --target-triple ${{ matrix.config.target_triple }}

  pyoxidizer-windows-installer:
    needs:
      - pyoxidizer-windows-exe
    runs-on: 'windows-2019'
    env:
      IN_CI: '1'
    steps:
      - uses: actions/checkout@v2

      - name: Download CLI exes
        uses: actions/download-artifact@v2
        with:
          name: pyoxidizer-windows_exes
          path: dist

      # We can use the built/downloaded pyoxidizer.exe to package itself. Nice.
      # Building the exe installer will build the MSI installers. 2 birds 1 stone.
      - name: Build Installers
        run: |
          dist/x86_64-pc-windows-msvc/pyoxidizer.exe build --var-env IN_CI IN_CI --release --target-triple x86_64-pc-windows-msvc exe_installer
          move build/x86_64-pc-windows-msvc/release/*/*.msi .
          move build/x86_64-pc-windows-msvc/release/*/*.exe .

      - name: Upload installers
        uses: actions/upload-artifact@v2
        with:
          name: pyoxidizer-windows_installers
          path: |
            *.exe
            *.msi

  pyoxidizer-linux-wheels-cross:
    strategy:
      fail-fast: false
      matrix:
        platform: [
          { manylinux: '2010', target: "i686-unknown-linux-musl", image_tag: "i686-musl" },
          { manylinux: '2014', target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl" },
          { manylinux: '2014', target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf" },
        ]
    runs-on: 'ubuntu-20.04'
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        RUSTUP_HOME: /root/.rustup
        CARGO_HOME: /root/.cargo
        CFLAGS_armv7_unknown_linux_musleabihf: -mfpu=vfpv3-d16
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build Wheels
        env:
          PYOXIDIZER_BUILD_FORCE_GIT_SOURCE: '1'
        run: |
          apt-get update
          apt-get install -y python3-pip
          pip3 install maturin==0.10.4
          maturin build -m pyoxidizer/Cargo.toml -b bin --no-sdist --release -o dist --target ${{ matrix.platform.target }} --manylinux ${{ matrix.platform.manylinux }}
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: pyoxidizer-wheels
          path: dist

  pyoxy-linux-x86_64-bin:
    needs:
      - 'pyoxidizer-linux-x86_64-bin'
    runs-on: 'ubuntu-20.04'
    steps:
      - uses: actions/checkout@v2

      - name: Download PyOxidizer Linux Executable
        uses: actions/download-artifact@v2
        with:
          name: pyoxidizer-linux-x86_64-bin
          path: /usr/local/bin

      - name: Restore Docker Image Cache
        id: cache-image
        uses: actions/cache@v2
        with:
          path: ~/image.tar
          key: ${{ runner.os }}-${{ hashFiles('ci/linux-portable-binary.Dockerfile') }}

      - name: Build Docker Image
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          cd ci
          docker build -f linux-portable-binary.Dockerfile -t pyoxidizer:build .
          docker save -o ~/image.tar pyoxidizer:build

      - name: Load Docker Image
        if: steps.cache-image.outputs.cache-hit == 'true'
        run: |
          docker load -i ~/image.tar

      - name: Build pyoxy Linux Executable
        run: |
          chmod +x /usr/local/bin/pyoxidizer

          mkdir -p pyoxy/build target
          chmod 777 pyoxy/build target
          docker run --rm -v $(pwd):/pyoxidizer -v /usr/local/bin:/opt/bin pyoxidizer:build /pyoxidizer/ci/build-pyoxy-linux.sh

          mkdir -p dist/x86_64-unknown-linux-gnu
          cp target/release/pyoxy dist/x86_64-unknown-linux-gnu/

      - name: Upload Executable
        uses: actions/upload-artifact@v2
        with:
          name: pyoxy-linux-bin
          path: |
            dist/*/*

  pyoxy-macos-exe:
    strategy:
      fail-fast: false
      matrix:
        target_triple:
          - 'aarch64-apple-darwin'
          - 'x86_64-apple-darwin'
    runs-on: 'macos-11'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SCCACHE_BUCKET: 'pyoxidizer-sccache'
      SCCACHE_S3_USE_SSL: '1'
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: ${{ matrix.target_triple }}

      - name: Install sccache
        run: |
          wget -O sccache.tar.gz --progress dot:mega https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-apple-darwin.tar.gz
          tar -xvzf sccache.tar.gz
          mv sccache-*/sccache /Users/runner/.cargo/bin/sccache
          chmod +x /Users/runner/.cargo/bin/sccache
          sccache --start-server

      - name: Build pyoxy Executable
        env:
          RUSTC_WRAPPER: sccache
        run: |
          case "${{ matrix.target_triple }}" in
            aarch64-apple-darwin)
              export SDKROOT=/Applications/Xcode_12.5.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.3.sdk
              export OSX_DEPLOYMENT_TARGET=11.0
              ;;
            x86_64-apple-darwin)
              export OSX_DEPLOYMENT_TARGET=10.9
              ;;
            *)
              echo "unhandled target triple: ${{ matrix.target_triple }}"
              exit 1
              ;;
          esac

          rustc --version
          cargo run --bin pyoxidizer -- build --release --target-triple ${{ matrix.target_triple }} --path pyoxy

          PYO3_CONFIG_FILE=$(pwd)/pyoxy/build/${{ matrix.target_triple }}/release/resources/pyo3-build-config-file.txt cargo build --bin pyoxy --target ${{ matrix.target_triple }} --release

          mkdir -p dist/${{ matrix.target_triple }}
          mv target/${{ matrix.target_triple }}/release/pyoxy dist/${{ matrix.target_triple }}/

      - name: Upload Executable
        uses: actions/upload-artifact@v2
        with:
          name: pyoxy-macos_exes
          path: |
            dist/*/*

  pyoxy-macos-universal-exe:
    needs:
      - pyoxy-macos-exe
    runs-on: 'macos-11'
    steps:
      - name: Download CLI exes
        uses: actions/download-artifact@v2
        with:
          name: pyoxy-macos_exes
          path: inputs

      - name: Produce Universal Binary
        run: |
          mkdir -p dist/macos-universal
          lipo inputs/*/pyoxy -create -output dist/macos-universal/pyoxy
          chmod +x dist/macos-universal/pyoxy
          lipo dist/macos-universal/pyoxy -info

      - name: Upload Universal Executable
        uses: actions/upload-artifact@v2
        with:
          name: pyoxy-macos_universal_exe
          path: dist/*/pyoxy
