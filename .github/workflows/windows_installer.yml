on:
  push:
  schedule:
    - cron: '13 15 * * *'
jobs:
  msi:
    strategy:
      fail-fast: false
      matrix:
        target:
          - 'i686-pc-windows-msvc'
          - 'x86_64-pc-windows-msvc'
    runs-on: 'windows-2019'
    env:
      IN_CI: '1'
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SCCACHE_BUCKET: 'pyoxidizer-sccache'
      SCCACHE_S3_USE_SSL: '1'
      # Prevent sccache server from stopping due to inactivity.
      SCCACHE_IDLE_TIMEOUT: '0'
    steps:
      - uses: actions/checkout@v2
        with:
          # Needed by build.rs, which needs to walk the Git history to find the
          # root commit. Without this, a shallow clone (depth=1) is performed.
          fetch-depth: 0

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: ${{ matrix.target }}

      - name: Cache sccache (Windows)
        id: cache-sccache
        uses: actions/cache@v2
        with:
          path: C:/Rust/.cargo/bin/sccache.exe
          key: ${{ runner.os }}-sccache-0

      - name: Install sccache build dependencies
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        run: |
          vcpkg integrate install
          vcpkg install openssl:x64-windows

      - name: Install sccache (Windows)
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        run: |
          cargo install --features 's3' sccache

      - name: Start sccache
        run: |
          sccache --start-server

      - name: Build Executable
        env:
          RUSTC_WRAPPER: sccache
        run: |
          rustc --version
          cargo build --target ${{ matrix.target }} --release --bin pyoxidizer

      - name: Produce x86 MSI
        if: ${{ matrix.target == 'i686-pc-windows-msvc' }}
        run: |
          target/${{ matrix.target }}/release/pyoxidizer.exe build --release --target-triple ${{ matrix.target }} msi_x86
          move build/${{ matrix.target }}/release/*/*.msi .

      - name: Produce x86_64 MSI
        if: ${{ matrix.target == 'x86_64-pc-windows-msvc' }}
        run: |
          target/${{ matrix.target }}/release/pyoxidizer.exe build --release --target-triple ${{ matrix.target }} msi_x86_64
          move build/${{ matrix.target }}/release/*/*.msi .

      - name: Upload MSI
        uses: actions/upload-artifact@v2
        with:
          name: msi
          path: '*.msi'
