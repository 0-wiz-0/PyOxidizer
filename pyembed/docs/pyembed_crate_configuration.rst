.. py:currentmodule:: oxidized_importer

.. _pyembed_crate_configuration:

===================
Crate Configuration
===================

Cargo Features to Control Building
==================================

The ``pyembed`` crate has a set of  ``build-mode-*`` Cargo feature flags to
control how build artifacts are created and consumed.

The features are described in the following sections.

``build-mode-standalone``
-------------------------

This is the default build mode. It is enabled by default.

This build mode uses default Python linking behavior and feature detection
as implemented by the ``pyo3``. It will attempt to find a ``python`` in
``PATH`` or from the ``PYO3_PYTHON`` environment variable and link against it.

This is the default mode for convenience, as it enables the ``pyembed`` crate
to build in the most environments. However, the built binaries will have a
dependency against a foreign ``libpython`` and likely aren't suitable for
distribution.

This mode does not attempt to invoke ``pyoxidizer`` or find artifacts it would
have built. It is possible to build the ``pyembed`` crate in this mode if
the ``pyo3`` crate can find a Python interpreter. But, the ``pyembed``
crate may not be usable or work in the way you want it to.

This mode is intended to be used for performing quick testing on the
``pyembed`` crate. It is quite possible that linking errors will occur
in this mode unless you take additional actions to point Cargo at
appropriate libraries.

``pyembed`` has a dependency on Python 3.8+. If an older Python is detected,
it can result in build errors, including unresolved symbol errors.

``build-mode-pyoxidizer-exe``
-----------------------------

A ``pyoxidizer`` executable will be run to generate build artifacts.

The path to this executable can be defined via the ``PYOXIDIZER_EXE``
environment variable. Otherwise ``PATH`` will be used.

At build time, ``pyoxidizer run-build-script`` will be run. A
``PyOxidizer`` configuration file will be discovered using PyOxidizer's
heuristics for doing so. ``OUT_DIR`` will be set if running from ``cargo``,
so a ``pyoxidizer.bzl`` next to the main Rust project being built should
be found and used.

``pyoxidizer run-build-script`` will resolve the default build script target
by default. To override which target should be resolved, specify the target
name via the ``PYOXIDIZER_BUILD_TARGET`` environment variable. e.g.::

   $ PYOXIDIZER_BUILD_TARGET=build-artifacts cargo build

``build-mode-prebuilt-artifacts``
---------------------------------

This mode tells the build script to reuse artifacts that were already built.
(Perhaps you called ``pyoxidizer build`` or ``pyoxidizer run-build-script``
outside the context of a normal ``cargo build``.)

In this mode, the build script will look for artifacts in the directory
specified by ``PYOXIDIZER_ARTIFACT_DIR`` if set, falling back to ``OUT_DIR``.
See :ref:`pyembed_build_artifacts` for documentation on the required
artifacts.

.. _pyembed_build_artifacts:

Build Artifacts
===============

When using ``build-mode-prebuilt-artifacts`` or ``build-mode-pyoxidizer-exe``,
the ``pyembed`` crate consumes special artifacts as part of its build process
to provide the embedded Python interpreter. These artifacts are typically
generated by PyOxidizer. However, there is nothing stopping anyone from
producing equivalent artifacts via other means and having ``pyembed`` consume
them.

The way this mode works is the build script is pointed at a directory
containing artifacts. The only required artifact is a ``default_python_config.rs``
file. This file defines the default embedded Python interpreter configuration.
